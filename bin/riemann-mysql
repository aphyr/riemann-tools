#!/usr/bin/env ruby

# Reports MySQL statistics to Riemann.

require File.expand_path('../../lib/riemann/tools', __FILE__)

class Riemann::Tools::MySQL
  include Riemann::Tools
  require 'mysql'

  opt :mysql_host, "MySQL Server Hostname", :type => String, :default => "localhost"
  opt :mysql_port, "MySQL Server Port", :default => 3306
  opt :mysql_username, "Authenticated username", :type => String, :default => "root"
  opt :mysql_password, "User's password", :type => String, :default => "root"
  opt :mysql_database, "Database to connect", :type => String, :default => "mysql"

  def initialize
    begin
      @db = Mysql.new opts[:mysql_host], opts[:mysql_username], opts[:mysql_password], opts[:mysql_database]
    rescue Mysql::Error
      puts "Error: Unable to connect with MySQL server"
      exit 1
    end

    @metrics = [ 'Com_delete', 'Com_flush', 'Com_insert', 'Com_lock_tables', 'Com_select', 'Com_update',
                 'Connections', 'Created_tmp_files', 'Created_tmp_tables', 'Flush_commands', 'Open_files',
                 'Open_tables', 'Queries', 'Slow_queries', 'Threads_connected Uptime' ]
  end

  def tick
    begin
      results = @db.query "SHOW STATUS"
      results.each_hash do |metric|
        if @metrics.include? "#{metric['Variable_name']}"
          report(
                 :host        =>  opts[:mysql_host].dup,
                 :service     =>  "Mysql #{metric['Variable_name']}",
                 :metric      =>  metric['Value'].to_f,
                 :state       =>  'ok',
                 :description =>  "Mysql #{metric['Variable_name']}".gsub("_", " "),
                 :tags        =>  ['mysql']
          )
        end
      end
    rescue Mysql::Error => e
      puts e.errno
      puts e.error
    end
  end
end

Riemann::Tools::MySQL.run